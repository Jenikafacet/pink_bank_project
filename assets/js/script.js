const newsList = document.getElementById("newsList");

fetch(
    "https://newsapi.org/v2/everything?q=stocks&sortBy=publishedAt&apiKey=b0ec2303fe7040c0834c0a32db70e9a3"
)
    .then((res) => {
        return res.json();
    })
    .then((data) => {
        console.log(data);
        for (let i = 0; i < 10; i++) {
            let newsItem = document.createElement("li");
            newsList.appendChild(newsItem);
            let newsItemLink = document.createElement("a");
            newsItemLink.classList.add("newsLink");
            newsItemLink.textContent =
                data.articles[i].title;
            newsItemLink.target = "_blank";
            newsItemLink.href = data.articles[i].url;
            newsItem.appendChild(newsItemLink);
            let newsItemInfo =
                document.createElement("div");
            newsItemInfo.classList.add("newsInfo");
            newsItemInfo.textContent =
                data.articles[i].publishedAt
                    .split("T")[1]
                    .slice(0, -4) +
                ", " +
                data.articles[i].source.name;
            newsItem.appendChild(newsItemInfo);
        }
    })
    .catch((err) => {
        console.log(err);
        let newsErr = document.createElement("li");
        newsErr.textContent = "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
        newsList.appendChild(newsErr);
    });

/* JS –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è */

let Cal = function (divId) {
    this.divId = divId;
    this.DaysOfWeek = [
        "–ü–Ω",
        "–í—Ç",
        "–°—Ä",
        "–ß—Ç",
        "–ü—Ç",
        "–°–±",
        "–í—Å",
    ];
    this.Months = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ];
    let d = new Date();
    this.currMonth = d.getMonth();
    this.currYear = d.getFullYear();
    this.currDay = d.getDate();
};
Cal.prototype.nextMonth = function () {
    if (this.currMonth == 11) {
        this.currMonth = 0;
        this.currYear = this.currYear + 1;
    } else {
        this.currMonth = this.currMonth + 1;
    }
    this.showcurr();
};
Cal.prototype.previousMonth = function () {
    if (this.currMonth == 0) {
        this.currMonth = 11;
        this.currYear = this.currYear - 1;
    } else {
        this.currMonth = this.currMonth - 1;
    }
    this.showcurr();
};
Cal.prototype.showcurr = function () {
    this.showMonth(this.currYear, this.currMonth);
};
Cal.prototype.showMonth = function (y, m) {
    let d = new Date(),
        firstDayOfMonth = new Date(y, m, 7).getDay(),
        lastDateOfMonth = new Date(y, m + 1, 0).getDate(),
        lastDayOfLastMonth =
            m == 0
                ? new Date(y - 1, 11, 0).getDate()
                : new Date(y, m, 0).getDate();
    let html = "<table>";
    html += "<thead><tr>";
    html +=
        '<td class="monthAndYear" colspan="7">' +
        this.Months[m] +
        " " +
        y +
        "</td>";
    html += "</tr></thead>";
    html += '<tr class="days">';
    for (let i = 0; i < 5; i++) {
        html += "<td>" + this.DaysOfWeek[i] + "</td>";
    }
    for (let i = 5; i < this.DaysOfWeek.length; i++) {
        html +=
            '<td class = "weekend">' +
            this.DaysOfWeek[i] +
            "</td>";
    }
    html += "</tr>";
    let i = 1;
    do {
        let dow = new Date(y, m, i).getDay();
        if (dow == 1) {
            html += "<tr>";
        } else if (i == 1) {
            html += "<tr>";
            let k =
                lastDayOfLastMonth - firstDayOfMonth + 1;
            for (let j = 0; j < firstDayOfMonth; j++) {
                html +=
                    '<td class="not-current">' +
                    k +
                    "</td>";
                k++;
            }
        }
        let chk = new Date();
        let chkY = chk.getFullYear();
        let chkM = chk.getMonth();
        if (
            chkY == this.currYear &&
            chkM == this.currMonth &&
            i == this.currDay
        ) {
            html += '<td class="today">' + i + "</td>";
        } else {
            html += '<td class="normal">' + i + "</td>";
        }
        if (dow == 0) {
            html += "</tr>";
        } else if (i == lastDateOfMonth) {
            let k = 1;
            for (dow; dow < 7; dow++) {
                html +=
                    '<td class="not-current">' +
                    k +
                    "</td>";
                k++;
            }
        }
        i++;
    } while (i <= lastDateOfMonth);
    html += "</table>";
    document.getElementById(this.divId).innerHTML = html;
};
window.onload = function () {
    let c = new Cal("divCal");
    c.showcurr();
    getId("btnNext").onclick = function () {
        c.nextMonth();
    };
    getId("btnPrev").onclick = function () {
        c.previousMonth();
    };
};
function getId(id) {
    return document.getElementById(id);
}

//–±–ª–æ–∫ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
async function convertCurrency() {
    const amount = document.getElementById("amount").value;
    const fromCurrency =
        document.getElementById("fromCurrency").value;
    const toCurrency =
        document.getElementById("toCurrency").value;

    if (!amount || amount <= 0) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É");
        return;
    }

    const url = `https://api.exchangerate-api.com/v4/latest/${fromCurrency}`;

    try {
        const response = await fetch(url);
        const data = await response.json();
        const rate = data.rates[toCurrency];
        const convertedAmount = (amount * rate).toFixed(2);

        document.getElementById(
            "currency-result"
        ).innerText = `${amount} ${fromCurrency} = ${convertedAmount} ${toCurrency}`;
    } catch (error) {
        alert(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
    }
}

fetch("https://www.cbr-xml-daily.ru/daily_json.js")
    .then((response) => response.json())
    .then((data) => {
        document.querySelector(
            ".exchange-rates__date"
        ).textContent =
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ: " + data.Date.slice(0, -15);
        document.querySelector(
            ".exchange-rates__item1_value"
        ).textContent =
            data.Valute.USD.Value.toFixed(2) + " RUB";
        document.querySelector(
            ".exchange-rates__item2_value"
        ).textContent =
            data.Valute.EUR.Value.toFixed(2) + " RUB";
        document.querySelector(
            ".exchange-rates__item3_value"
        ).textContent =
            data.Valute.GBP.Value.toFixed(2) + " RUB";

        function updateTrend(element, margin) {
            element.innerHTML =
                margin >= 0
                    ? "ü†ï +" + margin.toFixed(4)
                    : "ü†ó " + margin.toFixed(4);
            element.style.color =
                margin >= 0 ? "green" : "red";
        }
        updateTrend(
            document.querySelector(
                ".exchange-rates__item1_trend"
            ),
            data.Valute.USD.Value - data.Valute.USD.Previous
        );
        updateTrend(
            document.querySelector(
                ".exchange-rates__item2_trend"
            ),
            data.Valute.EUR.Value - data.Valute.EUR.Previous
        );
        updateTrend(
            document.querySelector(
                ".exchange-rates__item3_trend"
            ),
            data.Valute.GBP.Value - data.Valute.GBP.Previous
        );
    })
    .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        document.querySelector(
            ".exchange-rates__error"
        ).textContent = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö";
    });
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
const resultCard = document.getElementById(
    "currency-result-card"
);

//–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

// –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è
document
    .getElementById("calculate-button")
    .addEventListener("click", function () {
        const startPrice = parseFloat(
            document.getElementById("start-price").value
        );
        const currentPrice = parseFloat(
            document.getElementById("current-price").value
        );
        const shares = parseFloat(
            document.getElementById("shares").value
        );
        const dividends =
            parseFloat(
                document.getElementById("dividends").value
            ) || 0;

        if (
            isNaN(startPrice) ||
            isNaN(currentPrice) ||
            isNaN(shares)
        ) {
            alert(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."
            );
            return;
        }

        const initialInvestment = startPrice * shares;
        const currentInvestment =
            currentPrice * shares + dividends;
        const profitLoss =
            currentInvestment - initialInvestment;
        const profitLossPercent =
            (profitLoss / initialInvestment) * 100;

        document.getElementById(
            "current-value"
        ).innerHTML = `–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–º–∞–≥: <strong>${currentInvestment.toFixed(
            2
        )}</strong>`;
        document.getElementById("profit-loss").innerHTML =
            profitLoss >= 0
                ? `–ü—Ä–∏–±—ã–ª—å: <strong>${profitLoss.toFixed(
                      2
                  )}  (${profitLossPercent.toFixed(
                      2
                  )}%)</strong>`
                : `–£–±—ã—Ç–æ–∫: <strong>${Math.abs(
                      profitLoss
                  ).toFixed(2)}  (${Math.abs(
                      profitLossPercent
                  ).toFixed(2)}%)</strong>`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        document.getElementById(
            "result-card"
        ).style.display = "block";
    });
//–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä end

//–ê–∫—Ü–∏—è
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
const openModalBtn =
    document.getElementById("openModalBtn");
const closeModalBtn =
    document.getElementById("closeModalBtn");
const modal = document.getElementById("modal");
const callbackForm =
    document.getElementById("callbackForm");
const phoneInput = document.getElementById("phone");

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
openModalBtn.addEventListener("click", () => {
    modal.style.display = "flex";
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeModalBtn.addEventListener("click", () => {
    modal.style.display = "none";
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
window.addEventListener("click", (event) => {
    if (event.target === modal) {
        modal.style.display = "none";
    }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phoneInput.addEventListener("input", (event) => {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    event.target.value = event.target.value.replace(
        /\D/g,
        ""
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
callbackForm.addEventListener("submit", (event) => {
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    const nameInput = document.getElementById("name");
    const phoneInput = document.getElementById("phone");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    if (
        nameInput.value.trim() === "" ||
        phoneInput.value.trim() === ""
    ) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (phoneInput.value.length < 10) {
        alert(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä."
        );
        return;
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    alert(
        "–°–ø–∞—Å–∏–±–æ, " +
            nameInput.value +
            "! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è."
    );
    modal.style.display = "none"; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    callbackForm.reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
});

// –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
const countdownDate = new Date(
    "2025-03-15T00:00:00"
).getTime();

function updateCountdown() {
    const now = new Date().getTime();
    const distance = countdownDate - now;

    const days = Math.floor(
        distance / (1000 * 60 * 60 * 24)
    );
    const hours = Math.floor(
        (distance % (1000 * 60 * 60 * 24)) /
            (1000 * 60 * 60)
    );
    const minutes = Math.floor(
        (distance % (1000 * 60 * 60)) / (1000 * 60)
    );
    const seconds = Math.floor(
        (distance % (1000 * 60)) / 1000
    );

    document.getElementById("days").innerText = String(
        days
    ).padStart(2, "0");
    document.getElementById("hours").innerText = String(
        hours
    ).padStart(2, "0");
    document.getElementById("minutes").innerText = String(
        minutes
    ).padStart(2, "0");
    document.getElementById("seconds").innerText = String(
        seconds
    ).padStart(2, "0");

    if (distance < 0) {
        clearInterval(interval);
        document.getElementById("countdown").innerHTML =
            "<p>–ê–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</p>";
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
const interval = setInterval(updateCountdown, 1000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
updateCountdown();
// –ê–∫—Ü–∏—è –∫–æ–Ω–µ—Ü

// –ü–æ–≥–æ–¥–∞
async function fetchWeather() {
    const apiKey = "b5ffa9621e29ee2e42f640bc8a5fe6ae";
    const city = "Moscow";
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=ru`;

    try {
        const response = await fetch(url);
        const data = await response.json();
        document.getElementById(
            "weather-info"
        ).innerHTML = `
      <p>${data.name}: ${data.weather[0].description}</p>
      <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${data.main.temp}¬∞C</p>
      <p>–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${data.main.humidity}%</p>
    `;
    } catch (error) {
        document.getElementById(
            "weather-info"
        ).textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã";
    }
}
fetchWeather();
